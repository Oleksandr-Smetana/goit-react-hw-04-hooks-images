{"version":3,"sources":["components/ImageGallery/ImageGallery.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Modal/Modal.module.css","App.module.css","components/Button/Button.module.css","components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Loader/Loader.js","components/Button/Button.js","components/Modal/Modal.js","components/ImageGallery/ImageGallery.js","apiServises/PixabayAPI.js","App.js","index.js","components/Searchbar/Searchbar.module.css"],"names":["module","exports","Searchbar","onSubmit","useState","imageQuery","setImageQuery","className","s","SearchForm","type","SearchFormButton","onClick","e","preventDefault","trim","toast","warn","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","toLowerCase","ImageGalleryItem","tags","smallImage","largeImage","openModal","ImageGalleryItemImage","alt","src","App","color","height","width","style","position","top","left","transform","Button","modalRoot","document","querySelector","Modal","closeModal","url","useEffect","closeModalOnEsc","code","window","addEventListener","removeEventListener","createPortal","Overlay","target","ImageGallery","imageName","setImageName","images","setImages","page","setPage","status","setStatus","moreButton","setMoreButton","showModal","setShowModal","modalUrl","setModalUrl","modalAlt","setModalAlt","error","setError","fetch","then","response","ok","json","Promise","reject","Error","fetchImages","hits","total","prevImages","scrollToEndPage","length","success","catch","scrollTo","documentElement","scrollHeight","behavior","dataset","source","message","map","image","webformatURL","largeImageURL","id","autoClose","theme","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00c8cf1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__3n-Ms\",\"message\":\"ImageGallery_message__BNG2f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__191wq\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__2qe5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__315ta\",\"Modal\":\"Modal_Modal__3eq6H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__UNJNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__7MMAk\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nimport s from './Searchbar.module.css';\n\nexport default function Searchbar({ onSubmit }) {\n  const [imageQuery, setImageQuery] = useState('');\n\n  // запись нормализированного запроса в стейт imageQuery\n  const handleImageNameChange = e => {\n    setImageQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  // передача в App строки imageQuery и сброс стейта\n  const handleSubmitButton = e => {\n    e.preventDefault();\n\n    if (imageQuery.trim() === '') {\n      return toast.warn('Please enter your query!');\n    }\n    onSubmit(imageQuery);\n    setImageQuery('');\n  };\n\n  return (\n    <header className={s.Searchbar}>\n      <form className={s.SearchForm}>\n        <button\n          type=\"submit\"\n          className={s.SearchFormButton}\n          onClick={handleSubmitButton}\n        >\n          <span className={s.SearchFormButtonLabel}>\n            Search\n          </span>\n        </button>\n\n        <input\n          className={s.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          name=\"imageName\"\n          value={imageQuery}\n          onChange={handleImageNameChange}\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './ImageGalleryItem.module.css';\n\nexport default function ImageGalleryItem({\n  tags,\n  smallImage,\n  largeImage,\n  openModal,\n}) {\n  return (\n    <li className={s.ImageGalleryItem}>\n      <img\n        className={s.ImageGalleryItemImage}\n        alt={tags}\n        src={smallImage}\n        data-source={largeImage}\n        onClick={openModal}\n      />\n    </li>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  tags: PropTypes.string.isRequired,\n  smallImage: PropTypes.string.isRequired,\n  largeImage: PropTypes.string.isRequired,\n  openModal: PropTypes.func.isRequired,\n};\n","import Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport default function App() {\n  return (\n    <Loader\n      type=\"Rings\"\n      color=\"#3f51b5\"\n      height={80}\n      width={80}\n      style={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nexport default function Button({ onClick }) {\n  return (\n    <button\n      className={s.Button}\n      type=\"button\"\n      onClick={onClick}\n    >\n      Load more\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ closeModal, url, alt }) {\n  useEffect(() => {\n    // закрытие модалки при нажатии на Esc\n    const closeModalOnEsc = e => {\n      if (e.code === 'Escape') {\n        closeModal();\n      }\n    };\n\n    // добавление слушателя на Esc\n    window.addEventListener('keydown', closeModalOnEsc);\n\n    // снятие слушателя с Esc\n    return () => {\n      window.removeEventListener(\n        'keydown',\n        closeModalOnEsc,\n      );\n    };\n  }, [closeModal]);\n\n  // закрытие модалки при клике на backdrop\n  const closeModalOnBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      closeModal();\n    }\n  };\n\n  return createPortal(\n    <div\n      className={s.Overlay}\n      onClick={closeModalOnBackdropClick}\n    >\n      <div className={s.Modal}>\n        <img src={url} alt={alt} />\n      </div>\n    </div>,\n    modalRoot,\n  );\n}\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  url: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nimport s from './ImageGallery.module.css';\nimport fetchImages from '../../apiServises/PixabayAPI';\nimport ImageGalleryItem from '../ImageGalleryItem/';\nimport Loader from '../Loader/Loader';\nimport Button from '../Button/Button';\nimport Modal from '../Modal/Modal';\n\nexport default function ImageGallery({ imageQuery }) {\n  const [imageName, setImageName] = useState('');\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [status, setStatus] = useState('idle');\n  const [moreButton, setMoreButton] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalUrl, setModalUrl] = useState(null);\n  const [modalAlt, setModalAlt] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!imageQuery) {\n      return;\n    }\n    setStatus('pending');\n\n    // фетч галереи по условиям\n    fetchImages(imageQuery, page)\n      .then(({ hits, total }) => {\n        setStatus('resolved');\n\n        if (!total) {\n          setImages([]);\n          setPage(1);\n          setMoreButton(false);\n          toast.error(\n            `No images with query: \"${imageQuery}\".`,\n          );\n          return;\n        }\n\n        if (page === 1) {\n          setImageName(imageQuery);\n          setImages([...hits]);\n          setMoreButton(true);\n        } else {\n          if (imageQuery === imageName) {\n            setImages(prevImages => [\n              ...prevImages,\n              ...hits,\n            ]);\n            scrollToEndPage();\n          } else {\n            setPage(1);\n            setImages([...hits]);\n          }\n          if (hits.length < 12) {\n            setMoreButton(false);\n            toast.success(\n              `All images with query \"${imageQuery}\" were downloaded.`,\n            );\n            return;\n          }\n        }\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n        setMoreButton(false);\n      });\n  }, [imageQuery, imageName, page]);\n\n  // перемещение viewport вниз галереи\n  const scrollToEndPage = () => {\n    return window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n\n  // увеличение значения page на 1 при клике на кнопку Load More\n  const incrementPageNumber = () => {\n    setPage(page => page + 1);\n  };\n\n  // закрытие модального окна\n  const closeModal = () => {\n    setShowModal(false);\n    setModalAlt(null);\n    setModalUrl(null);\n  };\n\n  // открытие модального окна\n  const openModal = e => {\n    setShowModal(true);\n    setModalAlt(e.target.alt);\n    setModalUrl(e.target.dataset.source);\n  };\n\n  if (status === 'idle') {\n    return (\n      <h2 className={s.message}>\n        What are we looking for?\n      </h2>\n    );\n  }\n\n  if (status === 'pending') {\n    return <Loader />;\n  }\n\n  if (status === 'rejected') {\n    return <h2 className={s.message}>{error.message}</h2>;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <>\n        <ul className={s.ImageGallery}>\n          {images.map(image => (\n            <ImageGalleryItem\n              key={image.id}\n              tags={image.tags}\n              smallImage={image.webformatURL}\n              largeImage={image.largeImageURL}\n              openModal={openModal}\n            />\n          ))}\n        </ul>\n        {moreButton && (\n          <Button onClick={incrementPageNumber} />\n        )}\n        {showModal && (\n          <Modal\n            closeModal={closeModal}\n            url={modalUrl}\n            alt={modalAlt}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  imageQuery: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://pixabay.com/api/?';\nconst API_KEY = '23038692-8ee91ca42b74ab69b2665b678';\n\nexport default function fetchImages(imageQuery, page) {\n  return fetch(\n    `${BASE_URL}q=${imageQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`No images with query: ${imageQuery}...`),\n    );\n  });\n}\n","import { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport s from './App.module.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\n\nexport default function App() {\n  const [imageQuery, setImageQuery] = useState('');\n\n  // const handleFormSubmit = imageQuery => {\n  //   setImageQuery(imageQuery);\n  // };\n\n  return (\n    <div className={s.App}>\n      <Searchbar onSubmit={setImageQuery} />\n      <ImageGallery imageQuery={imageQuery} />\n      <ToastContainer\n        autoClose={4000}\n        position=\"bottom-center\"\n        theme=\"colored\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__3bvva\",\"SearchForm\":\"Searchbar_SearchForm__2OfLO\",\"SearchFormButton\":\"Searchbar_SearchFormButton__3GiwD\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__1t60U\",\"SearchFormInput\":\"Searchbar_SearchFormInput__1sB4F\"};"],"sourceRoot":""}